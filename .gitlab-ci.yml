# latest image using golang
image: golang:latest

# Cache that can be used if needed
.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

# Stages definition
stages:
  - build
  - verify
  - unit-test
  - integration-test
  - package
  - release
  - docs

# Build job that compile the Golang app
build-job:
  stage: build
  extends: .go-cache
  script:
    # download all dependencies declared in go.mod file.
    - go mod download
    # keeps only the used ones.
    - go mod tidy
    # builds the project and outputs the binary in the newly generated mybinaries folder
    - mkdir -p mybinaries
    - go build -o mybinaries ./...
  artifacts:
    paths:
      - mybinaries

# Lint job that perform style checks on the source code
verify-job:
  stage: verify
  image: golangci/golangci-lint:latest
  allow_failure: false
  script:
    # formats source code.
    - go fmt $(go list ./... | grep -v /vendor/)
    # examines source code and reports suspicious constructs.
    - go vet $(go list ./... | grep -v /vendor/)
    # golangci is a Go linters aggregator that statically tests the code. If it fails, the pipeline is stopped.
    - golangci-lint run -v

# Test job using a static code custom-made
unit-test-job:
  stage: unit-test
  extends: .go-cache
  # Surely the project won't work if tests do not pass
  allow_failure: false
  #$(go list ./... | grep -v /vendor/) ignores all files within the vendor folder
  script:
    # tests code with provided test files. 
    # Go test makes it easy to differenciate Int and Unit tests, as it searches for the words between the " " in the function test name.
    # Results are saved in a file for debug purposes.
    - go test -run "Unit" > unitTest.out

# Test job using a static code custom-made
int-test-job:
  stage: integration-test
  extends: .go-cache
  # Surely the project won't work if tests do not pass
  allow_failure: false
  #$(go list ./... | grep -v /vendor/) ignores all files within the vendor folder
  script:
    # formats source code.
    - go fmt $(go list ./... | grep -v /vendor/)
    # examines source code and reports suspicious constructs.
    - go vet $(go list ./... | grep -v /vendor/)
    # tests code with provided test files. 
    # Go test makes it easy to differenciate Int and Unit tests, as it searches for the words between the " " in the function test name.
    # Results are saved in a file for debug purposes.
    - go test -run "Integration" > intTest.out

package-job:
  stage: package
  extends: .go-cache
  script:
    # create a directory called "release" to organize the packaging process.
    - mkdir -p release
    # copy the contents of the "mybinaries" directory into the "release" directory.
    - cp mybinaries/* release/
     # copy the README.me.
    - cp README.md release/
    # copy the endpoint.me.
    - cp endpoint.md release/
    # copy the "web" folder.
    - cp -r web release/
    # copy the "data" folder.
    - cp -r data release/

    # create a compressed TAR archive of the "release" directory.
    - tar -czf release.tar.gz release/
  artifacts:
    paths:
      # saved artifact
      - release.tar.gz
      
release-job:
  stage: release
  # Redefine the job container image
  image: docker:stable
  services:
    - docker:dind
  cache: {} # Disable cache
  # Explicit declation of job dependencies to download only their artifacts
  dependencies:
    - package-job
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:latest

docs-job:
  stage: docs
  script:
    - go install golang.org/x/tools/cmd/godoc@latest
    - godoc -http=:6060 & # Start the GoDoc server in the background
    - sleep 10  # Wait for a moment to ensure the GoDoc server fully starts
    - wget -O doc.html http://localhost:6060/pkg   # Generate the documentation and save it to public/doc.html
    - kill %1  # Stop the GoDoc server