# latest image using golang
image: golang:latest

# Global cache paths
.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

# Stages definition
stages:
  - build
  - verify
  - test
  - docs

build-job:
  stage: build
  extends: .go-cache
  script:
    # download all dependencies declared in go.mod file.
    - go mod download
    # keeps only the used ones.
    - go mod tidy
    # builds the project and outputs the binary in the newly generated mybinaries folder
    - mkdir -p mybinaries
    - go build -o mybinaries ./...
  artifacts:
    paths:
      - mybinaries


verify-job:
  stage: verify
  image: golangci/golangci-lint:latest
  allow_failure: false
  script:
    # golangci is a Go linters aggregator that statically tests the code. If it fails, the pipeline is stopped.
    - golangci-lint run -v

test-job:
  stage: test
  extends: .go-cache
  allow_failure: false
  #$(go list ./... | grep -v /vendor/) ignores all files within the vendor folder
  script:
    # formats source code.
    - go fmt $(go list ./... | grep -v /vendor/)
    # examines source code and reports suspicious constructs.
    - go vet $(go list ./... | grep -v /vendor/)
    # tests code with provided test files.
    - go test -run "Integration"
    - go test -run "Unit"
    # coverage test
    - go test -cover
    
 docs-job:
  stage: docs
  script:
    - go install golang.org/x/tools/cmd/godoc@latest
    - godoc -http=:6060 & # Start the GoDoc server in the background
    - sleep 10  # Wait for a moment to ensure the GoDoc server fully starts
    - wget -O doc.html http://localhost:6060/pkg   # Generate the documentation and save it to public/doc.html
    - kill %1  # Stop the GoDoc server